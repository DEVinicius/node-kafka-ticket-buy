version: '3.7'
services:
    zookeeper:
        image: wurstmeister/zookeeper:latest
        ports:
            - '2181:2181'

    kafka:
        image: wurstmeister/kafka:2.13-2.8.1
        ports:
            - '9092:9092'
        links:
            - zookeeper
        environment:
            KAFKA_ADVERTISED_HOST_NAME: ${HOST_IP}
            KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
            KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
            KAFKA_DELETE_TOPIC_ENABLE: 'true'
            KAFKA_CREATE_TOPICS: 'topic-test:1:1'
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock

    database:
        image: mysql
        command: --default-authentication-plugin=mysql_native_password
        restart: always
        ports:
          - '3306:3306'
        volumes:
          - './.docker/data:/var/lib/mysql'
        environment:
          - MYSQL_ROOT_PASSWORD=root
          - MYSQL_USER=teste
    

    kafka-connect:
        image: confluentinc/cp-kafka-connect-base:latest
        container_name: kafka-connect
        depends_on:
            - zookeeper
            - kafka
        ports:
            - 8083:8083
        environment:
            CONNECT_BOOTSTRAP_SERVERS: 'kafka:9092'
            CONNECT_REST_PORT: 8083
            CONNECT_GROUP_ID: kafka-connect
            CONNECT_CONFIG_STORAGE_TOPIC: _connect-configs
            CONNECT_OFFSET_STORAGE_TOPIC: _connect-offsets
            CONNECT_STATUS_STORAGE_TOPIC: _connect-status
            CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
            CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
            CONNECT_INTERNAL_KEY_CONVERTER: 'org.apache.kafka.connect.json.JsonConverter'
            CONNECT_INTERNAL_VALUE_CONVERTER: 'org.apache.kafka.connect.json.JsonConverter'
            CONNECT_REST_ADVERTISED_HOST_NAME: 'kafka-connect'
            CONNECT_LOG4J_ROOT_LOGLEVEL: 'INFO'
            CONNECT_LOG4J_LOGGERS: 'org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR'
            CONNECT_LOG4J_APPENDER_STDOUT_LAYOUT_CONVERSIONPATTERN: '[%d] %p %X{connector.context}%m (%c:%L)%n'
            CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: '1'
            CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: '1'
            CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: '1'
            # # Optional settings to include to support Confluent Control Center
            #   CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
            #   CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
            #  ---------------
            CONNECT_PLUGIN_PATH: /usr/share/java,/usr/share/confluent-hub-components,/data/connect-jars
        # If you want to use the Confluent Hub installer to d/l component, but make them available
        # when running this offline, spin up the stack once and then run :
        #   docker cp kafka-connect:/usr/share/confluent-hub-components ./data/connect-jars
        volumes:
            - $PWD/data:/data
        # In the command section, $ are replaced with $$ to avoid the error 'Invalid interpolation format for "command" option'
        command:
            - bash
            - -c
            - |
                echo "Installing Connector"
                confluent-hub install --no-prompt confluentinc/kafka-connect-jdbc:10.5.2
                #
                echo "Launching Kafka Connect worker"
                /etc/confluent/docker/run &
                #
                sleep infinity
        extra_hosts:
            - 'host.docker.internal:172.17.0.1'
    control-center:
        image: confluentinc/cp-enterprise-control-center:latest
        hostname: control-center
        depends_on:
            - kafka
            - kafka-connect
        ports:
            - '9021:9021'
        environment:
            CONTROL_CENTER_BOOTSTRAP_SERVERS: 'kafka:9092'
            CONTROL_CENTER_REPLICATION_FACTOR: 1
            CONTROL_CENTER_CONNECT_CLUSTER: http://kafka-connect:8083
            PORT: 9021
        extra_hosts:
            - 'host.docker.internal:172.17.0.1'
